{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfpracticexd"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'"
		},
		"sql_database_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql_database'",
			"defaultValue": "Integrated Security=False;Data Source=@{linkedService().serverName};Initial Catalog=@{linkedService().databaseName};User ID=@{linkedService().userName};Password=@{linkedService().userPassword}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Copy_tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CustomerName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CustomerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "BillToCustomerID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "BillToCustomerID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CustomerCategoryID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerCategoryID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "BuyingGroupID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "BuyingGroupID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "PrimaryContactPersonID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PrimaryContactPersonID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "PostalCityID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PostalCityID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ValidFrom",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "ValidFrom",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "ValidTo",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "ValidTo",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.sourceSchema",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.sourceTable",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.sourceDB",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.sinkSchema",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.sinkTable",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.sinkDB",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSchema": {
						"type": "String"
					},
					"sourceTable": {
						"type": "String"
					},
					"sourceDB": {
						"type": "String"
					},
					"sinkSchema": {
						"type": "String"
					},
					"sinkTable": {
						"type": "String"
					},
					"sinkDB": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_loading')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from watermarktable",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "watermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select MAX(',pipeline().parameters.LastModifyTimeCode,') as NewWatermarkValue from ',pipeline().parameters.SourceTable)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Incremental_SouceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IncrementalCopyActivity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.SourceTable} where @{pipeline().parameters.LastModifyTimeCode} > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and @{pipeline().parameters.LastModifyTimeCode} <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkValue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Incremental_SouceDataset",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Sales",
									"TableName": "Customers"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Incremental_SinkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "IncrementalCopyActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@pipeline().parameters.StoreProcedureName",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"LastModifiedtimeCode": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceTable": {
						"type": "string",
						"defaultValue": "Sales.Customers"
					},
					"LastModifyTimeCode": {
						"type": "string",
						"defaultValue": "LastEditedBy"
					},
					"StoreProcedureName": {
						"type": "String",
						"defaultValue": "dbo.usp_write_watermark"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/watermarkDataset')]",
				"[concat(variables('factoryId'), '/datasets/Incremental_SouceDataset')]",
				"[concat(variables('factoryId'), '/datasets/Incremental_SinkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDtype2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCDtype2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDtype2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ODScustomer": {
										"schema": "sales",
										"tableName": "customers",
										"dbName": "ODS_database"
									},
									"DWcustomer": {
										"schema": "dimension",
										"tableName": "customer",
										"dbName": "WideWorldImportersDW-Standard"
									},
									"UpdateDimensionCustomer": {
										"schema": "dimension",
										"tableName": "customer",
										"dbName": "WideWorldImportersDW-Standard"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDtype2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Incremental-', pipeline().RunId, '.txt')",
							"type": "Expression"
						},
						"folderPath": "incrementalcopy",
						"container": "database"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_SouceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "String",
						"defaultValue": "Sales"
					},
					"TableName": {
						"type": "String",
						"defaultValue": "Customers"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_database",
					"type": "LinkedServiceReference",
					"parameters": {
						"databaseName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						},
						"serverName": "xdsqlserver01.database.windows.net",
						"userName": "xdadmin",
						"userPassword": "Nxd$$30709"
					}
				},
				"parameters": {
					"schema": {
						"type": "String"
					},
					"tableName": {
						"type": "String"
					},
					"dbName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/watermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_database')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"databaseName": {
						"type": "String"
					},
					"serverName": {
						"type": "String"
					},
					"userName": {
						"type": "String"
					},
					"userPassword": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('sql_database_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDtype2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_dataset",
								"type": "DatasetReference"
							},
							"name": "ODScustomer"
						},
						{
							"dataset": {
								"referenceName": "sql_dataset",
								"type": "DatasetReference"
							},
							"name": "DWcustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dataset",
								"type": "DatasetReference"
							},
							"name": "UpdateDimensionCustomer"
						}
					],
					"transformations": [
						{
							"name": "AddHashValue",
							"description": "Add hash value column."
						},
						{
							"name": "AddHashId",
							"description": "Add hash value column."
						},
						{
							"name": "CheckExistUpdateValue",
							"description": "Check exist records in ODS customer table."
						},
						{
							"name": "FilterUpdateRecords",
							"description": "Filter all of the update records."
						},
						{
							"name": "UpdateObsolete",
							"description": "Update status of records and add end date. "
						},
						{
							"name": "MaskAsUpdate"
						},
						{
							"name": "DeletUnwantColumn",
							"description": "Delete hash columns."
						},
						{
							"name": "DropUnwantColumn",
							"description": "Delete hash columns"
						},
						{
							"name": "AddKey"
						},
						{
							"name": "JoinWithMaxSurrogateKey"
						},
						{
							"name": "GetMaxSurrogateKey"
						},
						{
							"name": "AddActiveColumn",
							"description": "Add a column to show status."
						},
						{
							"name": "UpdateKeyValue"
						},
						{
							"name": "Union"
						},
						{
							"name": "AddSurrogateKey"
						},
						{
							"name": "MaskAsInsert"
						},
						{
							"name": "ReplaceNullValue"
						}
					],
					"scriptLines": [
						"parameters{",
						"     PrimaryKey as integer ({Customer Key})",
						"}",
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          BillToCustomerID as string,",
						"          CustomerCategoryID as string,",
						"          BuyingGroupID as string,",
						"          PrimaryContactPersonID as string,",
						"          PostalCityID as string,",
						"          ValidFrom as date,",
						"          ValidTo as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODScustomer",
						"source(output(",
						"          {Customer Key} as integer,",
						"          {WWI Customer ID} as integer,",
						"          Customer as string,",
						"          {Bill To Customer} as string,",
						"          Category as string,",
						"          {Buying Group} as string,",
						"          {Primary Contact} as string,",
						"          {Postal Code} as string,",
						"          {Valid From} as date,",
						"          {Valid To} as date,",
						"          {Lineage Key} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DWcustomer",
						"ODScustomer derive(HashId = md5(CustomerID),",
						"          HashColumn = md5(byNames(['CustomerName','BillToCustomerID','CustomerCategoryID','BuyingGroupID','PrimaryContactPersonID','PostalCityID','ValidFrom','ValidTo']))) ~> AddHashValue",
						"AddSurrogateKey derive(HashId = md5({Customer Key}),",
						"          HashColumn = md5(byNames(['{WWI Customer ID}','Customer','{Bill To Customer}','Category','{Buying Group}','{Primary Contact}','{Postal Code}','{Valid From}','{Valid To}','{Valid To}','{Lineage Key}']))) ~> AddHashId",
						"AddHashValue, AddHashId exists(AddHashValue@HashId == AddHashId@HashId",
						"     && AddHashValue@HashColumn == AddHashId@HashColumn,",
						"     negate:true,",
						"     broadcast: 'auto')~> CheckExistUpdateValue",
						"AddHashId, CheckExistUpdateValue exists(AddHashId@HashId == AddHashValue@HashId",
						"     && AddHashId@HashColumn == AddHashValue@HashColumn,",
						"     negate:false,",
						"     broadcast: 'auto')~> FilterUpdateRecords",
						"FilterUpdateRecords derive(IsActive = 0,",
						"          {Valid To} = currentDate()) ~> UpdateObsolete",
						"UpdateObsolete alterRow(updateIf(true())) ~> MaskAsUpdate",
						"UpdateKeyValue select(mapColumn(",
						"          {Customer Key} = CustomerID,",
						"          Customer = CustomerName,",
						"          {Bill To Customer} = BillToCustomerID,",
						"          Category = CustomerCategoryID,",
						"          {Buying Group} = BuyingGroupID,",
						"          {Primary Contact} = PrimaryContactPersonID,",
						"          {Postal Code} = PostalCityID,",
						"          {Valid From} = ValidFrom,",
						"          {Valid To} = ValidTo,",
						"          IsActive,",
						"          {WWI Customer ID},",
						"          {Lineage Key},",
						"          Key",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DeletUnwantColumn",
						"MaskAsUpdate select(mapColumn(",
						"          {Customer Key},",
						"          {WWI Customer ID},",
						"          Customer,",
						"          {Bill To Customer},",
						"          Category,",
						"          {Buying Group},",
						"          {Primary Contact},",
						"          {Postal Code},",
						"          {Valid From},",
						"          {Valid To},",
						"          {Lineage Key},",
						"          IsActive,",
						"          Key",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnwantColumn",
						"CheckExistUpdateValue keyGenerate(output(Key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddKey",
						"AddKey, GetMaxSurrogateKey join(Key == MaxSurrogateKey || true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithMaxSurrogateKey",
						"AddHashId aggregate(MaxSurrogateKey = max(toInteger(byName('Key')))) ~> GetMaxSurrogateKey",
						"DWcustomer derive(IsActive = 1) ~> AddActiveColumn",
						"JoinWithMaxSurrogateKey derive(Key = Key + MaxSurrogateKey,",
						"          IsActive = 1,",
						"          ValidFrom = currentDate(),",
						"          {WWI Customer ID} = CustomerID,",
						"          {Lineage Key} = 0) ~> UpdateKeyValue",
						"MaskAsInsert, DropUnwantColumn union(byName: true)~> Union",
						"AddActiveColumn keyGenerate(output(Key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddSurrogateKey",
						"ReplaceNullValue alterRow(upsertIf(true())) ~> MaskAsInsert",
						"DeletUnwantColumn derive({Buying Group} = iifNull({Buying Group}, 'Unknown'),",
						"          Category = iifNull(Category, 'Unknown')) ~> ReplaceNullValue",
						"Union sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {Customer Key},",
						"          Customer,",
						"          {Bill To Customer},",
						"          Category,",
						"          {Buying Group},",
						"          {Primary Contact},",
						"          {Postal Code},",
						"          {Valid From},",
						"          {Valid To},",
						"          IsActive,",
						"          {WWI Customer ID},",
						"          {Lineage Key},",
						"          Key",
						"     )) ~> UpdateDimensionCustomer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_dataset')]"
			]
		}
	]
}