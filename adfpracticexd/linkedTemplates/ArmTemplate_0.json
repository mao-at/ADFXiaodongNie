{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfpracticexd"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"ODS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ODS'"
		},
		"OLTP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OLTP'"
		},
		"linkedService1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService1'"
		},
		"sql_database_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql_database'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ODS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OLTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('OLTP_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_database')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"databaseName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('sql_database_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_database",
					"type": "LinkedServiceReference",
					"parameters": {
						"databaseName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"schema": {
						"type": "String"
					},
					"tableName": {
						"type": "String"
					},
					"dbName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_OLTP_to_ODS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OrderLineID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "OrderLineID",
											"type": "Int32",
											"physicalType": "Int32"
										}
									},
									{
										"source": {
											"name": "OrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "OrderID",
											"type": "Int32",
											"physicalType": "Int32"
										}
									},
									{
										"source": {
											"name": "StockItemID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "StockItemID",
											"type": "Int32",
											"physicalType": "Int32"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PackageTypeID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PackageTypeID",
											"type": "Int32",
											"physicalType": "Int32"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Quantity",
											"type": "Int32",
											"physicalType": "Int32"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "TaxRate",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 3,
											"precision": 18
										},
										"sink": {
											"name": "TaxRate",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "PickedQuantity",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PickedQuantity",
											"type": "Int32",
											"physicalType": "Int32"
										}
									},
									{
										"source": {
											"name": "PickingCompletedWhen",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "PickingCompletedWhen",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "LastEditedBy",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "LastEditedBy",
											"type": "Int32",
											"physicalType": "Int32"
										}
									},
									{
										"source": {
											"name": "LastEditedWhen",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "LastEditedWhen",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.sourceSchema",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.sourceTable",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.sourceDB",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.sinkSchema",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.sinkTable",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.sinkDB",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSchema": {
						"type": "String"
					},
					"sourceTable": {
						"type": "String"
					},
					"sourceDB": {
						"type": "String"
					},
					"sinkSchema": {
						"type": "String"
					},
					"sinkTable": {
						"type": "String"
					},
					"sinkDB": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-18T20:50:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDtype2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_dataset",
								"type": "DatasetReference"
							},
							"name": "ODSOrder"
						},
						{
							"dataset": {
								"referenceName": "sql_dataset",
								"type": "DatasetReference"
							},
							"name": "ODSOrderlines"
						},
						{
							"dataset": {
								"referenceName": "sql_dataset",
								"type": "DatasetReference"
							},
							"name": "DWorder"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dataset",
								"type": "DatasetReference"
							},
							"name": "DeminsionTableSink"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "MergeOrder",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "AddColumn",
							"description": "Creating/updating the columns."
						},
						{
							"name": "AddComputeColumn1",
							"description": "Creating/updating the columns."
						},
						{
							"name": "AddComputeColumn2",
							"description": "Creating/updating the columns."
						},
						{
							"name": "HashValue",
							"description": "Add hash column."
						},
						{
							"name": "Hashref",
							"description": "Add hash column."
						},
						{
							"name": "ExistCheckUpdateNew"
						},
						{
							"name": "SetToActive",
							"description": "Add status column and end date column"
						},
						{
							"name": "ExistCheckObsolete"
						},
						{
							"name": "UpdateObsolete"
						},
						{
							"name": "MakeAsUpdate"
						},
						{
							"name": "SetActiveStatue"
						},
						{
							"name": "DropUnwantColumn",
							"description": "Drop HashId column. "
						},
						{
							"name": "DropUnwantHashColumn",
							"description": "Drop hash id column"
						},
						{
							"name": "Union"
						},
						{
							"name": "MarkAsInsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     order_key as string ('Order Key'),",
						"     customer_key as string ('Customer Key')",
						"}",
						"source(output(",
						"          OrderID as integer,",
						"          CustomerID as integer,",
						"          SalespersonPersonID as integer,",
						"          PickedByPersonID as integer,",
						"          ContactPersonID as integer,",
						"          BackorderOrderID as integer,",
						"          OrderDate as date,",
						"          ExpectedDeliveryDate as date,",
						"          CustomerPurchaseOrderNumber as string,",
						"          IsUndersupplyBackordered as boolean,",
						"          Comments as string,",
						"          DeliveryInstructions as string,",
						"          InternalComments as string,",
						"          PickingCompletedWhen as timestamp,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSOrder",
						"source(output(",
						"          OrderLineID as integer,",
						"          OrderID as integer,",
						"          StockItemID as integer,",
						"          Description as string,",
						"          PackageTypeID as integer,",
						"          Quantity as integer,",
						"          UnitPrice as decimal(18,2),",
						"          TaxRate as decimal(18,3),",
						"          PickedQuantity as integer,",
						"          PickingCompletedWhen as timestamp,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSOrderlines",
						"source(output(",
						"          {Order Key} as long,",
						"          {City Key} as integer,",
						"          {Customer Key} as integer,",
						"          {Stock Item Key} as integer,",
						"          {Order Date Key} as date,",
						"          {Picked Date Key} as date,",
						"          {Salesperson Key} as integer,",
						"          {Picker Key} as integer,",
						"          {WWI Order ID} as integer,",
						"          {WWI Backorder ID} as integer,",
						"          Description as string,",
						"          Package as string,",
						"          Quantity as integer,",
						"          {Unit Price} as decimal(18,2),",
						"          {Tax Rate} as decimal(18,3),",
						"          {Total Excluding Tax} as decimal(18,2),",
						"          {Tax Amount} as decimal(18,2),",
						"          {Total Including Tax} as decimal(18,2),",
						"          {Lineage Key} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DWorder",
						"ODSOrder, ODSOrderlines join(ODSOrder@OrderID == ODSOrderlines@OrderID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          OrderID = ODSOrder@OrderID,",
						"          CustomerID,",
						"          SalespersonPersonID,",
						"          PickedByPersonID,",
						"          BackorderOrderID,",
						"          OrderDate,",
						"          PickingCompletedWhen = ExpectedDeliveryDate,",
						"          OrderLineID,",
						"          StockItemID,",
						"          Description,",
						"          Quantity,",
						"          UnitPrice,",
						"          TaxRate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MergeOrder",
						"MergeOrder derive({City Key} = 00000,",
						"          {Lineage Key} = 9,",
						"          Package = 'Null',",
						"          {Total Excluding Tax} = round(multiply(Quantity, TaxRate),2)) ~> AddColumn",
						"AddColumn derive({Tax Amount} = round(multiply({Total Excluding Tax}, TaxRate),2)) ~> AddComputeColumn1",
						"AddComputeColumn1 derive({Total Including Tax} = round(add({Total Excluding Tax}, {Tax Amount}),2)) ~> AddComputeColumn2",
						"AddComputeColumn2 derive(inputHash = md5(OrderID,CustomerID)) ~> HashValue",
						"SetActiveStatue derive(HashId = md5({Order Key},{Customer Key})) ~> Hashref",
						"HashValue, Hashref exists(inputHash == HashId,",
						"     negate:true,",
						"     broadcast: 'auto')~> ExistCheckUpdateNew",
						"ExistCheckUpdateNew derive(IsActive = 1,",
						"          startDate = currentDate(),",
						"          endDate = toDate('9999-12-31')) ~> SetToActive",
						"Hashref, SetToActive exists({Order Key} == OrderID",
						"     && {Customer Key} == CustomerID,",
						"     negate:false,",
						"     broadcast: 'auto')~> ExistCheckObsolete",
						"ExistCheckObsolete derive(IsActive = 0,",
						"          endDate = currentDate()) ~> UpdateObsolete",
						"UpdateObsolete alterRow(updateIf(true())) ~> MakeAsUpdate",
						"DWorder derive(IsActive = 1,",
						"          startDate = toDate('0000-12-31'),",
						"          endDate = toDate('9999-12-31')) ~> SetActiveStatue",
						"MakeAsUpdate select(mapColumn(",
						"          {Order Key},",
						"          {City Key},",
						"          {Customer Key},",
						"          {Stock Item Key},",
						"          {Order Date Key},",
						"          {Picked Date Key},",
						"          {Salesperson Key},",
						"          {Picker Key},",
						"          {WWI Order ID},",
						"          {WWI Backorder ID},",
						"          Description,",
						"          Package,",
						"          Quantity,",
						"          {Unit Price},",
						"          {Tax Rate},",
						"          {Total Excluding Tax},",
						"          {Tax Amount},",
						"          {Total Including Tax},",
						"          {Lineage Key},",
						"          IsActive,",
						"          startDate,",
						"          endDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnwantColumn",
						"SetToActive select(mapColumn(",
						"          {Order Key} = OrderID,",
						"          {Customer Key} = CustomerID,",
						"          {Salesperson Key} = SalespersonPersonID,",
						"          {Picker Key} = PickedByPersonID,",
						"          {WWI Backorder ID} = BackorderOrderID,",
						"          {Order Date Key} = OrderDate,",
						"          {Picked Date Key} = PickingCompletedWhen,",
						"          {WWI Order ID} = OrderLineID,",
						"          {Stock Item Key} = StockItemID,",
						"          Description,",
						"          Quantity,",
						"          {Unit Price} = UnitPrice,",
						"          {Tax Rate} = TaxRate,",
						"          {City Key},",
						"          {Lineage Key},",
						"          Package,",
						"          {Total Excluding Tax},",
						"          {Tax Amount},",
						"          {Total Including Tax},",
						"          IsActive,",
						"          startDate,",
						"          endDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnwantHashColumn",
						"MarkAsInsert, DropUnwantColumn union(byName: true)~> Union",
						"DropUnwantHashColumn alterRow(insertIf(true())) ~> MarkAsInsert",
						"Union sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:[($order_key),($customer_key)],",
						"     skipKeyWrites:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {Order Key},",
						"          {Customer Key},",
						"          {Salesperson Key},",
						"          {Picker Key},",
						"          {WWI Backorder ID},",
						"          {Order Date Key},",
						"          {Picked Date Key},",
						"          {WWI Order ID},",
						"          {Stock Item Key},",
						"          Description,",
						"          Quantity,",
						"          {Unit Price},",
						"          {Tax Rate},",
						"          {City Key},",
						"          {Lineage Key},",
						"          Package,",
						"          {Total Excluding Tax},",
						"          {Tax Amount},",
						"          {Total Including Tax},",
						"          IsActive,",
						"          startDate,",
						"          endDate",
						"     )) ~> DeminsionTableSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SDCtype2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCDtype2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDtype2",
								"type": "DataFlowReference",
								"parameters": {
									"order_key": {
										"value": "'@{pipeline().parameters.orderKey}'",
										"type": "Expression"
									},
									"customer_key": {
										"value": "'@{pipeline().parameters.customerKey}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ODSOrder": {
										"schema": "sales",
										"tableName": "orders",
										"dbName": "ODS_database"
									},
									"ODSOrderlines": {
										"schema": "sales",
										"tableName": "orderlines",
										"dbName": "ODS_database"
									},
									"DWorder": {
										"schema": "fact",
										"tableName": "order",
										"dbName": "WideWorldImportersDW-Standard"
									},
									"DeminsionTableSink": {
										"schema": "fact",
										"tableName": "order",
										"dbName": "WideWorldImportersDW-Standard"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"orderKey": {
						"type": "String"
					},
					"customerKey": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDtype2')]"
			]
		}
	]
}