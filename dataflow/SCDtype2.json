{
	"name": "SCDtype2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "sql_dataset",
						"type": "DatasetReference"
					},
					"name": "ODSOrder"
				},
				{
					"dataset": {
						"referenceName": "sql_dataset",
						"type": "DatasetReference"
					},
					"name": "ODSOrderlines"
				},
				{
					"dataset": {
						"referenceName": "sql_dataset",
						"type": "DatasetReference"
					},
					"name": "DWorder"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sql_dataset",
						"type": "DatasetReference"
					},
					"name": "DeminsionTableSink"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "MergeOrder",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "AddColumn",
					"description": "Creating/updating the columns."
				},
				{
					"name": "AddComputeColumn1",
					"description": "Creating/updating the columns."
				},
				{
					"name": "AddComputeColumn2",
					"description": "Creating/updating the columns."
				},
				{
					"name": "HashValue",
					"description": "Add hash column."
				},
				{
					"name": "Hashref",
					"description": "Add hash column."
				},
				{
					"name": "ExistCheckUpdateNew"
				},
				{
					"name": "SetToActive",
					"description": "Add status column and end date column"
				},
				{
					"name": "ExistCheckObsolete"
				},
				{
					"name": "UpdateObsolete"
				},
				{
					"name": "MakeAsUpdate"
				},
				{
					"name": "SetActiveStatue"
				},
				{
					"name": "DropUnwantColumn",
					"description": "Drop HashId column. "
				},
				{
					"name": "DropUnwantHashColumn",
					"description": "Drop hash id column"
				},
				{
					"name": "union1"
				},
				{
					"name": "MarkAsInsert"
				}
			],
			"scriptLines": [
				"parameters{",
				"     order_key as string ('Order Key'),",
				"     customer_key as string ('Customer Key')",
				"}",
				"source(output(",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          SalespersonPersonID as integer,",
				"          PickedByPersonID as integer,",
				"          ContactPersonID as integer,",
				"          BackorderOrderID as integer,",
				"          OrderDate as date,",
				"          ExpectedDeliveryDate as date,",
				"          CustomerPurchaseOrderNumber as string,",
				"          IsUndersupplyBackordered as boolean,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          PickingCompletedWhen as timestamp,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ODSOrder",
				"source(output(",
				"          OrderLineID as integer,",
				"          OrderID as integer,",
				"          StockItemID as integer,",
				"          Description as string,",
				"          PackageTypeID as integer,",
				"          Quantity as integer,",
				"          UnitPrice as decimal(18,2),",
				"          TaxRate as decimal(18,3),",
				"          PickedQuantity as integer,",
				"          PickingCompletedWhen as timestamp,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ODSOrderlines",
				"source(output(",
				"          {Order Key} as long,",
				"          {City Key} as integer,",
				"          {Customer Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {Order Date Key} as date,",
				"          {Picked Date Key} as date,",
				"          {Salesperson Key} as integer,",
				"          {Picker Key} as integer,",
				"          {WWI Order ID} as integer,",
				"          {WWI Backorder ID} as integer,",
				"          Description as string,",
				"          Package as string,",
				"          Quantity as integer,",
				"          {Unit Price} as decimal(18,2),",
				"          {Tax Rate} as decimal(18,3),",
				"          {Total Excluding Tax} as decimal(18,2),",
				"          {Tax Amount} as decimal(18,2),",
				"          {Total Including Tax} as decimal(18,2),",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DWorder",
				"ODSOrder, ODSOrderlines join(ODSOrder@OrderID == ODSOrderlines@OrderID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          OrderID = ODSOrder@OrderID,",
				"          CustomerID,",
				"          SalespersonPersonID,",
				"          PickedByPersonID,",
				"          BackorderOrderID,",
				"          OrderDate,",
				"          PickingCompletedWhen = ExpectedDeliveryDate,",
				"          OrderLineID,",
				"          StockItemID,",
				"          Description,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MergeOrder",
				"MergeOrder derive({City Key} = 00000,",
				"          {Lineage Key} = 9,",
				"          Package = 'Null',",
				"          {Total Excluding Tax} = round(multiply(Quantity, TaxRate),2)) ~> AddColumn",
				"AddColumn derive({Tax Amount} = round(multiply({Total Excluding Tax}, TaxRate),2)) ~> AddComputeColumn1",
				"AddComputeColumn1 derive({Total Including Tax} = round(add({Total Excluding Tax}, {Tax Amount}),2)) ~> AddComputeColumn2",
				"AddComputeColumn2 derive(inputHash = md5(OrderID,CustomerID)) ~> HashValue",
				"SetActiveStatue derive(HashId = md5({Order Key},{Customer Key})) ~> Hashref",
				"HashValue, Hashref exists(inputHash == HashId,",
				"     negate:true,",
				"     broadcast: 'auto')~> ExistCheckUpdateNew",
				"ExistCheckUpdateNew derive(IsActive = 1,",
				"          startDate = currentDate(),",
				"          endDate = toDate('9999-12-31')) ~> SetToActive",
				"Hashref, SetToActive exists({Order Key} == OrderID",
				"     && {Customer Key} == CustomerID,",
				"     negate:false,",
				"     broadcast: 'auto')~> ExistCheckObsolete",
				"ExistCheckObsolete derive(IsActive = 0,",
				"          endDate = currentDate()) ~> UpdateObsolete",
				"UpdateObsolete alterRow(updateIf(true())) ~> MakeAsUpdate",
				"DWorder derive(IsActive = 1,",
				"          startDate = toDate('0000-12-31'),",
				"          endDate = toDate('9999-12-31')) ~> SetActiveStatue",
				"MakeAsUpdate select(mapColumn(",
				"          {Order Key},",
				"          {City Key},",
				"          {Customer Key},",
				"          {Stock Item Key},",
				"          {Order Date Key},",
				"          {Picked Date Key},",
				"          {Salesperson Key},",
				"          {Picker Key},",
				"          {WWI Order ID},",
				"          {WWI Backorder ID},",
				"          Description,",
				"          Package,",
				"          Quantity,",
				"          {Unit Price},",
				"          {Tax Rate},",
				"          {Total Excluding Tax},",
				"          {Tax Amount},",
				"          {Total Including Tax},",
				"          {Lineage Key},",
				"          IsActive,",
				"          startDate,",
				"          endDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantColumn",
				"SetToActive select(mapColumn(",
				"          {Order Key} = OrderID,",
				"          {Customer Key} = CustomerID,",
				"          {Salesperson Key} = SalespersonPersonID,",
				"          {Picker Key} = PickedByPersonID,",
				"          {WWI Backorder ID} = BackorderOrderID,",
				"          {Order Date Key} = OrderDate,",
				"          {Picked Date Key} = PickingCompletedWhen,",
				"          {WWI Order ID} = OrderLineID,",
				"          {Stock Item Key} = StockItemID,",
				"          Description,",
				"          Quantity,",
				"          {Unit Price} = UnitPrice,",
				"          {Tax Rate} = TaxRate,",
				"          {City Key},",
				"          {Lineage Key},",
				"          Package,",
				"          {Total Excluding Tax},",
				"          {Tax Amount},",
				"          {Total Including Tax},",
				"          IsActive,",
				"          startDate,",
				"          endDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantHashColumn",
				"MarkAsInsert, DropUnwantColumn union(byName: true)~> union1",
				"DropUnwantHashColumn alterRow(insertIf(true())) ~> MarkAsInsert",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:[($order_key),'$customer_key'],",
				"     skipKeyWrites:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {Order Key},",
				"          {Customer Key},",
				"          {Salesperson Key},",
				"          {Picker Key},",
				"          {WWI Backorder ID},",
				"          {Order Date Key},",
				"          {Picked Date Key},",
				"          {WWI Order ID},",
				"          {Stock Item Key},",
				"          Description,",
				"          Quantity,",
				"          {Unit Price},",
				"          {Tax Rate},",
				"          {City Key},",
				"          {Lineage Key},",
				"          Package,",
				"          {Total Excluding Tax},",
				"          {Tax Amount},",
				"          {Total Including Tax},",
				"          IsActive,",
				"          startDate,",
				"          endDate",
				"     )) ~> DeminsionTableSink"
			]
		}
	}
}